package org.interview.service;

import org.interview.entity.Subscription;
import org.interview.repository.PendingSubscriptionRepository;
import org.interview.repository.SubscriptionRepository;
import org.interview.telegram.Bot;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.time.LocalDateTime;
import java.util.List;

@Component
public class SubscriptionNotifier {

    private static final Logger log = LoggerFactory.getLogger(SubscriptionNotifier.class);

    private final SubscriptionRepository subscriptionRepository;
    private final PendingSubscriptionRepository pendingRepository;
    private final Bot bot;
    private final SubscriptionService subscriptionService;

    public SubscriptionNotifier(
            SubscriptionRepository subscriptionRepository,
            PendingSubscriptionRepository pendingRepository,
            Bot bot,
            SubscriptionService subscriptionService) {
        this.subscriptionRepository = subscriptionRepository;
        this.pendingRepository = pendingRepository;
        this.bot = bot;
        this.subscriptionService = subscriptionService;
    }

    // üîî –ù–∞–ø–æ–º–∏–Ω–∞–µ–º –∑–∞ –¥–µ–Ω—å –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
    @Scheduled(cron = "0 0 10 * * *")
    public void notifyExpiringSubscriptions() {
        LocalDateTime targetDate = LocalDateTime.now().plusDays(1);
        List<Subscription> expiring = subscriptionRepository.findAllByExpiresAtBetween(
                targetDate.withHour(0).withMinute(0).withSecond(0),
                targetDate.withHour(23).withMinute(59).withSecond(59)
        );

        for (Subscription sub : expiring) {
            if (sub.getChatId() == null) continue;

            log.info("üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: –æ—Å—Ç–∞–ª–æ—Å—å 1 –¥–µ–Ω—å –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è", sub.getUserName());

            SendMessage message = new SendMessage();
            message.setChatId(sub.getChatId());
            message.setText("‚è≥ –ü—Ä–∏–≤–µ—Ç! –û—Å—Ç–∞–ª—Å—è 1 –¥–µ–Ω—å –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–≤–æ–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∏–Ω—Ç–µ—Ä–≤—å—é-–±–æ—Ç–∞. " +
                    "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—É—á–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã ‚Äî –ø—Ä–æ–¥–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É! üí°");

            try {
                bot.execute(message);
            } catch (TelegramApiException e) {
                log.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é " + sub.getUserName(), e);
            }
        }
    }

    // üßπ –û—á–∏—â–∞–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
    @Scheduled(fixedDelay = 86_400_000) // —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏
    public void cleanupExpired() {
        subscriptionService.deleteExpiredSubscriptions();

        LocalDateTime cutoff = LocalDateTime.now().minusYears(5);
        int count = pendingRepository.findAll().stream()
                .filter(p -> p.getCreatedAt().isBefore(cutoff))
                .map(p -> {
                    pendingRepository.delete(p);
                    return 1;
                }).reduce(0, Integer::sum);

        if (count > 0) {
            log.info("üßπ –û—á–∏—â–µ–Ω–æ {} –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö Pending-–ø–æ–¥–ø–∏—Å–æ–∫", count);
        }
    }
}