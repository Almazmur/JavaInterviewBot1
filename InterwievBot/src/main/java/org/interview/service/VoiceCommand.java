package org.interview.service;

import org.interview.client.YandexClient;
import org.interview.dto.Question;
import org.interview.repository.InterviewRepository;
import org.interview.repository.TopicRepository;
import org.interview.telegram.Bot;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.methods.GetFile;
import org.telegram.telegrambots.meta.api.objects.File;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.Voice;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Deque;

@Component
public class VoiceCommand extends Command {

    @Value("${interview.max-questions}")
    private int maxQuestions;

    public VoiceCommand(YandexClient yandexClient,
                        InterviewRepository interviewRepository,
                        TopicRepository topicRepository) {
        super(topicRepository, yandexClient, interviewRepository);
    }

    @Override
    public boolean isApplicable(Update update) {
        return update.getMessage().hasVoice();
    }

    @Override
    public String process(Update update, Bot bot) {
        String chatId = update.getMessage().getChatId().toString();
        String answer = transcribeVoiceAnswer(update, bot);

        // ‚ú® –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø—Ä–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å—Ä–∞–∑—É –≤–µ—Ä–Ω—É—Ç—å —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if (answer.startsWith("‚ö†Ô∏è")) {
            return answer;
        }

        // ‚ú® –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è
        if (!interviewRepository.hasActiveSession(chatId)) {
            return "‚ùó –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤—å—é. –ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.";
        }

        interviewRepository.addAnswer(chatId, answer);

        if (interviewRepository.getUserQuestions(chatId) == maxQuestions) {
            return provideFeedback(chatId);
        } else {
            return askNextQuestion(chatId);
        }
    }

    private String transcribeVoiceAnswer(Update update, Bot bot) {
        Voice voice = update.getMessage().getVoice();
        String fileId = voice.getFileId();
        java.io.File downloadedFile = null;
        java.io.File oggOpusFile = null;

        try {
            GetFile getFileRequest = new GetFile();
            getFileRequest.setFileId(fileId);
            File file = bot.execute(getFileRequest);

            String filePath = file.getFilePath();
            System.out.println("üìÇ Telegram –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É: " + filePath);
            System.out.println("üì¶ MIME type: " + voice.getMimeType());

            downloadedFile = bot.downloadFile(filePath);
            System.out.println("üéß –°–∫–∞—á–∞–Ω —Ñ–∞–π–ª: " + downloadedFile.getAbsolutePath() +
                    ", —Ä–∞–∑–º–µ—Ä: " + downloadedFile.length() + " –±–∞–π—Ç");

            if (downloadedFile.length() > 1024 * 1024) {
                return "‚ö†Ô∏è –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç –≤ 30 —Å–µ–∫ –∏–ª–∏ 1 –ú–ë. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏ –µ–≥–æ.";
            }

            // –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ oggopus
            oggOpusFile = yandexClient.convertToOggOpus(downloadedFile);

            // üßπ –¢–µ–ø–µ—Ä—å —á–∏—Å—Ç–∏–º —Ñ–∞–π–ª—ã –ø–æ—Å–ª–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
            String result = yandexClient.transcribe(oggOpusFile);
            return result;

        } catch (Exception e) {
            throw new IllegalStateException("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è", e);
        } finally {
            if (downloadedFile != null && downloadedFile.exists()) {
                boolean deleted = downloadedFile.delete();
                if (!deleted) {
                    downloadedFile.deleteOnExit();
                    System.out.println("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª —Å—Ä–∞–∑—É, –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è");
                } else {
                    System.out.println("üßπ –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª—ë–Ω");
                }
            }
            if (oggOpusFile != null && oggOpusFile.exists()) {
                boolean deleted = oggOpusFile.delete();
                if (!deleted) {
                    oggOpusFile.deleteOnExit();
                    System.out.println("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª —Å—Ä–∞–∑—É, –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è");
                } else {
                    System.out.println("üßπ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª—ë–Ω");
                }
            }
        }
    }

    private String askNextQuestion(String userName) {
        String nextQuestion = topicRepository.getNextQuestion(userName);

        if (nextQuestion == null) {
            return "–ö–∞–∂–µ—Ç—Å—è, –±–æ–ª—å—à–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–µ—Ç. üéâ –ü–æ–¥–æ–∂–¥–∏ —á—É—Ç—å-—á—É—Ç—å ‚Äî —Å–µ–π—á–∞—Å –±—É–¥–µ—Ç –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å!";
        }

        int questionNumber = interviewRepository.getNextQuestionNumber(userName);
        interviewRepository.addQuestion(userName, nextQuestion);

        return String.format("–í–æ–ø—Ä–æ—Å ‚Ññ%d:\n%s", questionNumber, nextQuestion);
    }

    private String provideFeedback(String userName) {
        StringBuilder feedbackPrompt = new StringBuilder(Prompts.FEEDBACK_PROMPT);
        Deque<Question> questions = interviewRepository.finishInterview(userName);
        questions.forEach(question -> feedbackPrompt.append("–í–æ–ø—Ä–æ—Å: ")
                .append(question.getQuestion()).append("\n–û—Ç–≤–µ—Ç: ")
                .append(question.getAnswer()).append("\n\n"));
        return yandexClient.promptModel(feedbackPrompt.toString());
    }
}